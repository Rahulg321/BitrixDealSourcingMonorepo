"use server";

import { streamObject } from "ai";
import { createOpenAI } from "@ai-sdk/openai";
import { createStreamableValue } from "ai/rsc";
import { z } from "zod";
import { InferDealSchemaType } from "../(main-site)/infer-deal/page";

const openai = createOpenAI({
  // custom settings, e.g.
  apiKey: process.env.AI_API_KEY,
  compatibility: "strict", // strict mode, enable when using the OpenAI API
});

export async function inferDealFromDescription(values: InferDealSchemaType) {
  "use server";
  try {
    const stream = createStreamableValue();

    (async () => {
      const { partialObjectStream } = await streamObject({
        model: openai("gpt-4o"),
        prompt: `generated a structured schema for a deal using the schema provided and the descirpiton given -> ${values.description}`,

        schema: z.object({
          source: z
            .string()
            .describe("The origin of the deal listing.")
            .optional()
            .nullable(),
          cashFlow: z
            .string()
            .describe("The cash flow for the deal.")
            .optional()
            .nullable(),
          location: z
            .string()
            .describe("The location of the deal.")
            .optional()
            .nullable(),
          description: z
            .string()
            .describe("A small explanation of the deal.")
            .optional()
            .nullable(),
          asking_price: z
            .string()
            .describe("The asking price of the deal (e.g., '$15,500,000').")
            .optional()
            .nullable(),
          category: z
            .string()
            .describe("The category of the deal (e.g., 'Pharmacy').")
            .optional()
            .nullable(),
          created_at: z
            .string()
            .describe("Timestamp of when the deal was created.")
            .optional()
            .nullable(), // Timestamp as string for simplicity
          link: z
            .string()
            .describe("The official website link to the deal listing.")
            .optional()
            .nullable(),
          listing_code: z
            .string()
            .describe("The unique listing code (e.g., 'XYRX1W').")
            .optional()
            .nullable(),
          main_content: z
            .string()
            .describe("Full description text from the deal listing."),
          revenue: z
            .string()
            .describe("The ebitda generated by the deal (e.g., '$9,000,000').")
            .optional()
            .nullable(),
          ebitda: z
            .string()
            .describe(
              "The revenue generated by the deal (e.g., '$25,000,000')."
            )
            .optional()
            .nullable(),
          state: z
            .string()
            .describe(
              "The state where the deal is located (e.g., 'Not Disclosed')."
            )
            .optional()
            .nullable(),
          title: z.string().describe("The title of the deal."),
          under_contract: z
            .string()
            .describe("Whether the deal is under contract (e.g., 'Yes').")
            .optional()
            .nullable(),
        }),
      });

      for await (const partialObject of partialObjectStream) {
        stream.update(partialObject);
      }

      stream.done();
    })();

    return stream.value;
  } catch (error) {
    console.error("an error occured while trying to infer deal", error);
  }
}
